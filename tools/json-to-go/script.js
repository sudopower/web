// JSON to Go Struct Converter

function convertToGo() {
    const inputJson = document.getElementById('inputJson').value.trim();
    const outputGo = document.getElementById('outputGo');
    const structName = document.getElementById('structName').value.trim();
    const addJsonTags = document.getElementById('addJsonTags').checked;
    const omitEmpty = document.getElementById('omitEmpty').checked;
    
    if (!inputJson) {
        showMessage('Please enter JSON to convert.', 'error');
        return;
    }
    
    try {
        const jsonData = JSON.parse(inputJson);
        const goStruct = generateGoStruct(jsonData, structName, addJsonTags, omitEmpty);
        outputGo.value = goStruct;
    } catch (error) {
        showMessage('Invalid JSON: ' + error.message, 'error');
    }
}

function generateGoStruct(data, structName, addJsonTags, omitEmpty) {
    const name = structName && structName !== 'Auto' ? structName : 'AutoGenerated';
    const imports = new Set();
    
    // Generate the main struct with embedded structs
    const mainStruct = generateStructWithEmbedded(name, data, imports, addJsonTags, omitEmpty);
    
    // Build the final output
    let output = '';
    
    // Add imports if needed
    if (imports.size > 0) {
        output += 'import (\n';
        for (const imp of imports) {
            output += `\t"${imp}"\n`;
        }
        output += ')\n\n';
    }
    
    output += mainStruct;
    
    return output.trim();
}

function generateStructWithEmbedded(name, data, imports, addJsonTags, omitEmpty) {
    let struct = `type ${name} struct {\n`;
    const fields = [];
    
    for (const [key, value] of Object.entries(data)) {
        const field = generateFieldEmbedded(key, value, imports, addJsonTags, omitEmpty);
        fields.push(field);
    }
    
    struct += fields.join('\n');
    struct += '\n}';
    
    return struct;
}

function generateFieldEmbedded(key, value, imports, addJsonTags, omitEmpty) {
    const goKey = toPascalCase(key);
    const goType = getGoTypeEmbedded(value, imports);
    const jsonTag = addJsonTags ? generateJsonTag(key, omitEmpty) : '';
    
    return `\t${goKey} ${goType} ${jsonTag}`;
}

function getGoTypeEmbedded(value, imports) {
    if (value === null) {
        return 'interface{}';
    }
    
    if (Array.isArray(value)) {
        if (value.length === 0) {
            return '[]interface{}';
        }
        const elementType = getGoTypeEmbedded(value[0], imports);
        return `[]${elementType}`;
    }
    
    if (typeof value === 'object') {
        // Check if object is empty
        if (Object.keys(value).length === 0) {
            return 'interface{}';
        }
        
        // Return embedded struct definition
        return generateEmbeddedStruct(value, imports);
    }
    
    switch (typeof value) {
        case 'string':
            // Check if it's a date/time string
            if (isDateString(value)) {
                imports.add('time');
                return 'time.Time';
            }
            return 'string';
        case 'number':
            return Number.isInteger(value) ? 'int' : 'float64';
        case 'boolean':
            return 'bool';
        default:
            return 'interface{}';
    }
}

function generateEmbeddedStruct(data, imports) {
    let struct = 'struct {\n';
    const fields = [];
    
    for (const [key, value] of Object.entries(data)) {
        const goKey = toPascalCase(key);
        const goType = getGoTypeEmbedded(value, imports);
        const jsonTag = generateJsonTag(key, false);
        fields.push(`\t\t${goKey} ${goType} ${jsonTag}`);
    }
    
    struct += fields.join('\n');
    struct += '\n\t}';
    
    return struct;
}

function generateJsonTag(key, omitEmpty) {
    const tag = omitEmpty ? `json:"${key},omitempty"` : `json:"${key}"`;
    return '`' + tag + '`';
}

function toPascalCase(str) {
    return str
        .replace(/([a-z])([A-Z])/g, '$1_$2')
        .split(/[_\-\s]+/)
        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
        .join('');
}

function isDateString(str) {
    // Simple date detection - can be enhanced
    const dateRegex = /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d{3})?Z?)?$/;
    return dateRegex.test(str);
}

function hashCode(str) {
    let hash = 0;
    if (str.length === 0) return hash;
    for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return hash;
}

function clearAll() {
    document.getElementById('inputJson').value = '';
    document.getElementById('outputGo').value = '';
    document.getElementById('structName').value = 'Auto';
    document.getElementById('addJsonTags').checked = true;
    document.getElementById('omitEmpty').checked = false;
    clearMessage();
}

function loadExample() {
    const exampleJson = {
        "name": "John Doe",
        "age": 30,
        "email": "john@example.com",
        "isActive": true,
        "createdAt": "2024-01-15T10:30:00Z",
        "address": {
            "street": "123 Main St",
            "city": "New York",
            "zipCode": "10001",
            "coordinates": {
                "lat": 40.7128,
                "lng": -74.0060
            }
        },
        "hobbies": ["reading", "coding", "traveling"],
        "scores": [95, 87, 92, 88]
    };
    
    document.getElementById('inputJson').value = JSON.stringify(exampleJson, null, 2);
    document.getElementById('structName').value = 'User';
}

function copyOutput() {
    const outputGo = document.getElementById('outputGo');
    
    if (!outputGo.value.trim()) {
        showMessage('No output to copy.', 'error');
        return;
    }
    
    outputGo.select();
    outputGo.setSelectionRange(0, 99999);
    
    try {
        document.execCommand('copy');
    } catch (err) {
        navigator.clipboard.writeText(outputGo.value).catch(() => {
            showMessage('Failed to copy to clipboard.', 'error');
        });
    }
}

function showMessage(message, type) {
    const messageArea = document.getElementById('messageArea');
    const messageClass = type === 'error' ? 'error-message' : 'success-message';
    
    messageArea.innerHTML = `<div class="${messageClass}">${message}</div>`;
    
    if (type === 'success') {
        setTimeout(() => {
            clearMessage();
        }, 3000);
    }
}

function clearMessage() {
    const messageArea = document.getElementById('messageArea');
    messageArea.innerHTML = '';
}

// Add keyboard shortcuts
document.addEventListener('keydown', function(event) {
    // Ctrl+Enter or Cmd+Enter to convert
    if ((event.ctrlKey || event.metaKey) && event.key === 'Enter') {
        event.preventDefault();
        convertToGo();
    }
    
    // Ctrl+E or Cmd+E to clear all
    if ((event.ctrlKey || event.metaKey) && event.key === 'e') {
        event.preventDefault();
        clearAll();
    }
    
    // Ctrl+C or Cmd+C to copy (when output is focused)
    if ((event.ctrlKey || event.metaKey) && event.key === 'c' && 
        document.activeElement.id === 'outputGo') {
        event.preventDefault();
        copyOutput();
    }
});

// Initialize the tool
document.addEventListener('DOMContentLoaded', function() {
    // Add some helpful text to the input placeholder
    const inputJson = document.getElementById('inputJson');
    inputJson.placeholder = 'Enter your JSON here...\n\nExample:\n{\n  "name": "John Doe",\n  "age": 30,\n  "email": "john@example.com",\n  "address": {\n    "street": "123 Main St",\n    "city": "New York"\n  }\n}';
});
